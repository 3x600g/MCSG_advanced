#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <unordered_map>
#include <algorithm>
#include <regex>

struct CrossSection {
    std::vector<std::vector<double>> data;

    double interpolate(double incidentErg) {
        if (data.empty()) return -1;
        for (int i = 0; i < data.size() - 1; ++i) {
            if (incidentErg >= data[i][0] && incidentErg <= data[i + 1][0]) {
                double x0 = data[i][0], y0 = data[i][1];
                double x1 = data[i + 1][0], y1 = data[i + 1][1];
                return y0 + (incidentErg - x0) * (y1 - y0) / (x1 - x0);
            }
        }
        return -1; // Out of range
    }
};

std::vector<std::vector<double>> readCrossSection(const std::string& filePath) {
    std::vector<std::vector<double>> xsData;
    std::ifstream file(filePath);
    double energy, xs;
    while (file >> energy >> xs) {
        xsData.push_back({energy, xs});
    }
    return xsData;
}

std::vector<int> extractIsotopes(const std::string& filePath) {
    std::vector<int> isotopes;
    std::ifstream file(filePath);
    std::string line;
    std::regex isotopeRegex("\\b\\d{5}\\b");
    while (std::getline(file, line)) {
        std::smatch matches;
        while (std::regex_search(line, matches, isotopeRegex)) {
            isotopes.push_back(std::stoi(matches[0]));
            line = matches.suffix();
        }
    }
    return isotopes;
}

int main() {
    std::string basePath = "D:\\input\\XS\\ENDF71\\";
    std::string mcsgPath = "D:\\input\\code_develop\\mcsg_inputs\\mcsg_test.txt";
    double incidentErg = 0.3;

    std::unordered_map<int, CrossSection> captures, fissions, scatterings;
    auto isotopes = extractIsotopes(mcsgPath);

    for (int isotope : isotopes) {
        captures[isotope].data = readCrossSection(basePath + std::to_string(isotope) + "_capture.txt");
        fissions[isotope].data = readCrossSection(basePath + std::to_string(isotope) + "_fission.txt");
        scatterings[isotope].data = readCrossSection(basePath + std::to_string(isotope) + "_scattering.txt");
    }

    for (int isotope : isotopes) {
        double captureXS = captures[isotope].interpolate(incidentErg);
        double fissionXS = fissions[isotope].interpolate(incidentErg);
        double scatteringXS = scatterings[isotope].interpolate(incidentErg);

        std::cout << "Isotope: " << isotope << std::endl;
        std::cout << "Capture XS: " << captureXS << ", Fission XS: " << fissionXS << ", Scattering XS: " << scatteringXS << std::endl;
    }

    return 0;
}
