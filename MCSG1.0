#include <fstream>
#include <sstream>
#include <vector>
#include <iostream>
#include <string>

class Surface {
public:
    int s_number;
    std::string s_type;
    std::vector<double> s_parameters; // 다양한 파라미터를 저장하기 위한 벡터

    // 생성자는 타입과 숫자, 그리고 파라미터 리스트를 받습니다.
    Surface(int num, const std::string& typ, const std::vector<double>& params)
            : s_number(num), s_type(typ), s_parameters(params) {}
};

std::vector<Surface> readSurfaceCards(const std::string& filePath) {
    std::ifstream file(filePath);
    std::string line;
    std::vector<Surface> surfaces;
    bool readingSurfaceCards = false;

    while (getline(file, line)) {
        if (line.find("surface card") != std::string::npos) {
            readingSurfaceCards = true;
        }
        if (line.find("end surface card") != std::string::npos) break; // 읽기를 중단합니다.

        if (readingSurfaceCards) {
            std::istringstream iss(line);
            int num;
            std::string type;
            std::vector<double> params;
            double param;

            iss >> num >> type;
            while (iss >> param) {
                params.push_back(param); // 파라미터를 벡터에 추가합니다.
            }
            surfaces.emplace_back(Surface(num, type, params));
        }
    }
    return surfaces;
}

class Material {
public:
    int m_number;
    double m_density;
    std::vector<std::pair<int, double>> composition; // 원소 번호와 weight percent
    double totalMass = 0.0;
    std::vector<double> numberDensities; // 원소별 number density

    Material(int num, double dens) : m_number(num), m_density(dens) {}

    void addElement(int atomicNumber, double weightPercent) {
        composition.push_back({atomicNumber, weightPercent});
    }
    void calculateTotalMass() {
        for (auto& element : composition) {
            int massNumber = element.first % 1000; // 원자 번호에서 질량 수를 추출
            double weight = element.second;
            totalMass += massNumber * (weight / 100.0);
        }
    }
    void calculateNumberDensities() {
        const double NA = 6.02e23; // 아보가드로 수
        for (auto& element : composition) {
            int massNumber = element.first % 1000;
            double weightPercent = element.second;
            double nd = (weightPercent / 100.0) * m_density * NA / totalMass;
            numberDensities.push_back(nd);
        }
    }
};

std::vector<Material> readMaterialCards(const std::string& filePath) {
    std::ifstream file(filePath);
    std::string line;
    std::vector<Material> materials;
    bool readingMaterialCards = false;

    while (getline(file, line)) {
        if (line.find("material card") != std::string::npos) {
            readingMaterialCards = true;
            // continue;
        }
        if (line.find("end material card") != std::string::npos) break;

        if (readingMaterialCards) {
            std::istringstream iss(line);
            int num;
            double density;
            iss >> num >> density;
            Material material(num, density);

            int atomicNumber;
            double weightPercent;
            while (iss >> atomicNumber >> weightPercent) {
                material.addElement(atomicNumber, weightPercent);
            }
            material.calculateTotalMass();
            material.calculateNumberDensities();
            materials.push_back(material);
        }
    }
    return materials;
}

int main() {
    std::string filePath = "D:\\input\\code_develop\\mcsg_inputs\\mcsg_test.txt"; // 파일 경로 수정 필요
    auto surfaces = readSurfaceCards(filePath);
    auto materials = readMaterialCards(filePath);

    for (const auto& material : materials) {
        std::cout << "Material Number: " << material.m_number << ", Density: " << material.m_density << ", Total Mass: " << material.totalMass << std::endl;
        std::cout << "Number Densities: ";
        for (const auto& nd : material.numberDensities) {
            std::cout << nd << " ";
        }
        std::cout << std::endl;
    }
    std::cout << materials[1].numberDensities[2] << std::endl;
    return 0;
}
